{"version":3,"sources":["actions/bitcoinActions.js","App.js","serviceWorker.js","reducers/bitcoinReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["RightHighNet","brain","NeuralNetwork","LeftLowNet","CenterOpenNet","CenterCloseNet","App","dispatch","useDispatch","state","useSelector","bitcoin","React","useState","num","setNum","fetchData","time","number","a","type","axios","get","response","labels","data","highA","high","low","open","i","unshift","close","moment","date","format","push","CenterOpenBrain","input","hgh","lw","cl","output","op","console","log","train","iterations","errorThresh","learningRate","momentum","CenterOpenResult","run","CenterCloseBrain","CenterCloseResult","RightHighBrain","RightHighResult","LeftLowBrain","RightLowResult","OpenBrainResult","CloseBrainResult","HighBrainResult","resultRvsL","LowBrainResult","payload","getData","className","onClick","onChange","e","target","value","loading","style","marginLeft","height","width","dataC","options","responsive","dataB","Boolean","window","location","hostname","match","initalState","datasets","label","backgroundColor","borderColor","pointBorderColor","bitcoinReducer","action","order","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d3cce1d.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport brain from 'brain.js/src/index';\r\nconst RightHighNet = new brain.NeuralNetwork();\r\nconst LeftLowNet = new brain.NeuralNetwork();\r\nconst CenterOpenNet = new brain.NeuralNetwork();\r\nconst CenterCloseNet = new brain.NeuralNetwork();\r\n\r\nexport const getData = ({ time, number }) => async dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: \"AWAITING_BITCOIN\"\r\n    })\r\n     //FREE APIKEY HERE--->https://financialmodelingprep.com/developer/docs/\r\n    const response = await axios.get(`https://financialmodelingprep.com/api/v3/historical-chart/${time}/BTCUSD?apikey=df8f3193c67e3f800048dc4863a1984e`)\r\n    //console.log(\"response\", response.data)\r\n   \r\n    const labels = [];\r\n    const data = [];\r\n    const highA = [];\r\n    const high = [];\r\n    const low = [];\r\n    const open = [];\r\n    for (let i = 0; i < number; i++) {\r\n      highA.unshift(response.data[i].high)\r\n      data.unshift(response.data[i].close)\r\n      low.unshift(response.data[i].low)\r\n      open.unshift(response.data[i].open)\r\n      labels.unshift(moment(response.data[i].date).format(\"LT\"))\r\n\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n    for (let i = 0; i < number; i++) {\r\n      high.push(highA[i])\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n// THE CENTER BRAIN OPEN PRICE PREDICTION\r\n    const CenterOpenBrain = [];\r\n    for (let i = 0; i < number; i++) {\r\n\r\n\r\n      CenterOpenBrain.unshift({\r\n\t\t  input: {\r\n\t\t\t  hgh: response.data[i].high / 77777,\r\n\t\t\t  lw: response.data[i].low / 77777,\r\n\t\t\t  cl: response.data[i].close / 77777,\r\n\t\t\t      },\r\n\t\t  output: {\r\n\t\t\t  op: response.data[i].open / 77777,\r\n\t\t\t\t\t}\r\n        })\r\n      }\r\n      console.log('BRAIN OPEN PRICE TRAINING ARRAY : ', CenterOpenBrain)\r\n\r\n      CenterOpenNet.train(CenterOpenBrain, {\r\n        iterations: 20000,\r\n        errorThresh: 0.0005,\r\n        log: false,\r\n        learningRate: 0.3,\r\n        momentum: 0.08\r\n           });\r\n\r\n           const CenterOpenResult = CenterOpenNet.run({\r\n                   hgh: response.data[number].open / 77777 ,\r\n                   lw: response.data[number].open / 77777,\r\n     // op: response.data[number] / 77777,\r\n                   cl: response.data[number].open / 77777,\r\n                    });\r\n// THE CENTER BRAIN CLOSE PRICE PREDICTION\r\n                    const CenterCloseBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      CenterCloseBrain.unshift({\r\n                        input: {\r\n\t\t\t                  hgh: response.data[i].high / 77777,\r\n\t\t\t                  lw: response.data[i].low / 77777,\r\n                        op: response.data[i].open / 77777\r\n                      },\r\n                      output: {\r\n                         cl: response.data[i].close / 77777\r\n                        }\r\n                      })\r\n                    }\r\n                    console.log('BRAIN CLOSE PRICE TRAINING ARRAY : ', CenterCloseBrain)\r\n                    CenterCloseNet.train(CenterCloseBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const CenterCloseResult = CenterCloseNet.run({\r\n                          hgh: response.data[number].close / 77777,\r\n                          lw: response.data[number].close / 77777,\r\n     // op: response.data[number] / 77777,\r\n                          cl: response.data[number].close / 77777,\r\n                        });\r\n         // THE RIGHT BRAIN HIGH PRICE PREDICTION\r\n                    const RightHighBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      RightHighBrain.unshift({\r\n                        input: {\r\n                        cl: response.data[i].close / 77777,\r\n\t\t\t                  lw: response.data[i].low / 77777,\r\n                        op: response.data[i].open / 77777\r\n                      },\r\n                      output: {\r\n                         hgh: response.data[i].high / 77777,\r\n                        }\r\n                      })\r\n                    }\r\n                    console.log('BRAIN HIGH PRICE TRAINING ARRAY :', RightHighBrain)\r\n                    RightHighNet.train(RightHighBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const RightHighResult = RightHighNet.run({\r\n                          \r\n                          lw: response.data[number].close / 77777,\r\n                          op: response.data[number].open / 77777,\r\n                          cl: response.data[number].close / 77777,\r\n                        });\r\n       // THE LEFT BRAIN LOW PRICE PREDICTION\r\n                    const LeftLowBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      LeftLowBrain.unshift({\r\n                        input: {\r\n                          hgh: response.data[i].high / 77777,\r\n                          cl: response.data[i].close / 77777,\r\n                          op: response.data[i].open / 77777\r\n                      },\r\n                      output: {\r\n                        lw: response.data[i].low / 77777,\r\n                      }\r\n                      })\r\n                    }\r\n                    console.log('BRAIN LOW PRICE TRAINING ARRAY :', LeftLowBrain)\r\n                    LeftLowNet.train(LeftLowBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const RightLowResult = LeftLowNet.run({\r\n                          hgh: response.data[number].high / 77777,\r\n                          op: response.data[number].open / 77777,\r\n                          cl: response.data[number].close / 77777,\r\n                        });\r\n\r\nconsole.log('OPEN PREDICTION: ', CenterOpenResult.op * 77777 );\r\nconsole.log('CLOSE PREDICTION: ', CenterCloseResult.cl * 77777 );\r\nconsole.log('HIGH PREDICTION: ', RightHighResult.hgh * 7777);\r\nconsole.log('LOW PREDICTION: ', RightLowResult.lw * 7777);\r\nconst OpenBrainResult = [];\r\nconst CloseBrainResult = [];\r\nconst HighBrainResult =[];\r\nconst LowBrainResult =[];\r\nconst resultRvsL = [];\r\n\r\n\r\n  LowBrainResult.push(RightLowResult.lw * 77777);\r\n  HighBrainResult.push(RightHighResult.hgh * 77777);\r\n  CloseBrainResult.push(CenterCloseResult.cl * 77777);\r\n  OpenBrainResult.push(CenterOpenResult.op * 77777);\r\n  resultRvsL.push((CloseBrainResult + OpenBrainResult) * .5);\r\n\r\n    dispatch({\r\n      type: \"SUCCESS_BITCOIN\",\r\n      payload: {\r\n        resultRvsL,\r\n         OpenBrainResult,\r\n         CloseBrainResult,\r\n         HighBrainResult,\r\n         LowBrainResult,\r\n        open,\r\n        low,\r\n        high,\r\n        data,\r\n        labels\r\n      }\r\n    })\r\n    \r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"REJECTED_BITCOIN\",\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Radar } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"./actions/bitcoinActions\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state.bitcoin)\r\n  const [num, setNum] = React.useState(15);\r\n\r\n  const fetchData = (time) => {\r\n    //Fetch data from redux using time\r\n    dispatch(getData({\r\n      time: time,\r\n      number: num\r\n    }))\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n      <div className=\"navbar\">\r\n      <h1>ARTIFICIAL INTELIGENCE 🕯CANDLESTICK🕯 PREDICTION </h1>\r\n      </div>\r\n      <div className=\"title\">\r\n      <h2>BTC/USD Timeseries</h2>\r\n      </div>\r\n      <div className={\"btns-wrapper\"}>\r\n\r\n        <button onClick={() => fetchData(\"1min\")}>1 Min</button>\r\n        <button onClick={() => fetchData(\"5min\")}>5 Min</button>\r\n        <button onClick={() => fetchData(\"15min\")}>15 Min</button>\r\n        <button onClick={() => fetchData(\"30min\")}>30 Min</button>\r\n        <button onClick={() => fetchData(\"1hour\")}>1 hour</button>\r\n        <button onClick={() => fetchData(\"4hour\")}>4 hour</button>\r\n\r\n        <input onChange={e => setNum(e.target.value)} />\r\n        {state.loading && <p>Loading...</p>}\r\n      </div>\r\n      <div className=\"info\">\r\n        <h4>Default Chart settings is set to 15 try more...entries by specifying any amount.</h4>\r\n      </div>\r\n         <div className={\"chart-wrapper\"}>\r\n      <Line\r\n          data={state.data}\r\n      /></div>\r\n          <div className={'explaination'}>\r\n          <h3 className=\"infoB\" style={{marginLeft:'150px'}}>\r\n            IF THE OPEN IS GREATER THEN THE CLOSE \r\n            THE SNAPSHOT USED TO FORCE TRAIN THE BRAIN \r\n            IS PREDICTING  A RED  ⬇BAR  🟥</h3>\r\n          <h3 className=\"infoB\" style={{marginLeft:'150px'}}>\r\n            IF THE CLOSE IS GREATER THEN THE OPEN\r\n             THE SNAPSHOT USED TO FORCE TRAIN THE BRAIN\r\n             IS PREDICTING A GREEN ⬆BAR 🟩</h3>\r\n             <div className='infoC' style={{marginLeft:'150px'}}>\r\n               <h4>⚠WARNING: PREDICTION CAN BE GREEN 🟩BAR AND YET CANDLESTICK CAN OPEN LOWER THEN LAST OPEN PRICE</h4>\r\n             </div>\r\n            </div>\r\n         <div className='container'>\r\n         <div style={{height:'900px', width:'900px'}}>\r\n      <Bar\r\n         data={state.dataC} options={{responsive: true}}\r\n      /></div>\r\n         <div>\r\n\r\n      </div>\r\n         <div style={{height:'900px', width:'900px'}}>\r\n      <Radar\r\n         data={state.dataB} options={{responsive: true}}\r\n      /></div>\r\n      </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//Random color generator\r\n//var r = () => Math.random() * 256 >> 0;\r\n//var color = `rgb(${r()}, ${r()}, ${r()})`;\r\n\r\nconst initalState = {\r\n  loading: false,\r\n  data: {\r\n    labels: [],\r\n    datasets: [{\r\n      label: \"BTC close\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n\r\n    }],\r\n    \r\n  },\r\n  dataB: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'radar',\r\n      label: \"BOT CHART PREDICTION\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      options: {\r\n        responsive: true\r\n      }\r\n    }]\r\n  },\r\n  dataC: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'bar',\r\n      label: \"BOT CHART PREDICTION\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      options: {\r\n        responsive: true\r\n      }\r\n    }]\r\n  }\r\n};\r\n\r\nconst bitcoinReducer = (state = initalState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"AWAITING_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case \"REJECTED_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case \"SUCCESS_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: {\r\n          labels: payload.labels,\r\n          datasets: [{\r\n            label: \"BTC CLOSE\",\r\n            data: payload.data,\r\n            backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n            borderColor: 'rgba(178, 116, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 3\r\n          },\r\n          {\r\n            type: 'line',\r\n            label: \"BTC OPEN\",\r\n            data: payload.open,\r\n            backgroundColor: 'rgba(10, 204, 0, 0.1)',\r\n            borderColor: 'rgba(10, 204, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 2\r\n          },{\r\n            type: 'line',\r\n            label: \"BTC HIGH\",\r\n            data: payload.high,\r\n            backgroundColor:'rgba(22, 91, 160, 0.9)',\r\n            borderColor: 'rgba(14, 38, 62,0.9)',\r\n            pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n            order: 4               \r\n          },{\r\n            type: 'line',\r\n            label: \"BTC LOW\",\r\n            data: payload.low,\r\n            backgroundColor:'rgba(255,255,0, 0.6)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            order: 1\r\n          },]\r\n        },\r\n        dataB: {\r\n          labels: ['OpenVsClose', 'Close Prediction', 'Open Prediction'],\r\n          datasets: [{\r\n            type: 'radar',\r\n            label: \"OPEN PRICE BRAIN PREDICTION\",\r\n            data: [payload.OpenBrainResult, payload.OpenBrainResult, payload.OpenBrainResult],// + (number + 1)],\r\n            backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n            borderColor: '\trgba(255, 0, 0, 0.9)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n\r\n            order: 1\r\n            },\r\n            {\r\n            type: 'radar',\r\n            label: \"CLOSE PRICE BRAIN PREDICTION\",\r\n            data: [payload.CloseBrainResult, payload.CloseBrainResult, payload.CloseBrainResult],\r\n            backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n            borderColor: 'rgba(10, 204, 0, 0.9)',\r\n            pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n\r\n            order: 3\r\n          },\r\n          {\r\n            type: 'radar',\r\n            label: \"HIGH PRICE BRAIN PREDICTION\",\r\n            data: [payload.HighBrainResult, payload.HighBrainResult, payload.HighBrainResult],\r\n            backgroundColor:'rgba(0,0,255, 0.7)',\r\n            borderColor: 'rgba(0,0,255, 0.9)',\r\n            pointBorderColor: 'rgba(0,0,255, 0.8)',\r\n\r\n            order: 3\r\n          },\r\n          {\r\n            type: 'radar',\r\n            label: \"LOW PRICE BRAIN PREDICTION\",\r\n            data: [payload.LowBrainResult, payload.LowBrainResult, payload.LowBrainResult],\r\n            backgroundColor:'rgba(255,255,0, 0.8)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n\r\n            order: 3\r\n          }]\r\n          },\r\n           dataC: {\r\n            labels: ['Close Prediction', 'Open Prediction'],\r\n            datasets: [{\r\n              type: 'bar',\r\n              label: \"Close - Open\",\r\n              data: [payload.CloseBrainResult - payload.OpenBrainResult],\r\n              backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n              borderColor: 'rgba(178, 116, 0, 1)',\r\n              pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n              order: 2\r\n            },\r\n            {\r\n              type: 'bar',\r\n              label: \"Open - Close\",\r\n              data: [payload.OpenBrainResult - payload.CloseBrainResult],\r\n              backgroundColor: 'rgba(10, 204, 0, 0.8)',\r\n              borderColor: 'rgba(10, 204, 0, 0.9)',\r\n              pointBorderColor: 'rgba(25, 16, 0, 0.8)',\r\n              order: 3\r\n            }]\r\n            },\r\n              options:{\r\n                responsive : true\r\n             }\r\n          }\r\n    default:\r\n      return state;\r\n  }\r\n  \r\n}\r\nexport default bitcoinReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport bitcoinReducer from \"./bitcoinReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  bitcoin: bitcoinReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}