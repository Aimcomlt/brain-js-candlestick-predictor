{"version":3,"sources":["actions/bitcoinActions.js","App.js","serviceWorker.js","reducers/bitcoinReducer.js","reducers/brainReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["RightHighNet","brain","NeuralNetwork","LeftLowNet","CenterOpenNet","CenterCloseNet","OpenVS","lableBox","OpenBrainResult","App","dispatch","useDispatch","state","useSelector","bitcoin","stateB","React","useState","num","setNum","fetchData","time","number","a","type","axios","get","response","unshift","data","open","moment","date","format","labels","close","highA","high","low","i","push","CenterOpenBrain","input","hgh","lw","cl","output","op","train","iterations","errorThresh","log","learningRate","momentum","CenterOpenResult","run","CenterCloseBrain","CenterCloseResult","RightHighBrain","RightHighResult","LeftLowBrain","RightLowResult","CloseBrainResult","HighBrainResult","resultRvsL","LowBrainResult","opVS","opVSI","length","splice","console","brOP","brOPI","laBox","laBoxI","midOP","midOPI","payload","getData","className","onClick","setInterval","onChange","e","target","value","clearInterval","loading","options","responsive","style","marginLeft","marginleft","height","width","dataC","dataB","dataD","Boolean","window","location","hostname","match","initalState","datasets","label","backgroundColor","borderColor","pointBorderColor","bitcoinReducer","action","order","Loading","scales","x","ticks","callback","index","values","brainReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+WAIMA,EAAe,IAAIC,IAAMC,cACzBC,EAAa,IAAIF,IAAMC,cACvBE,EAAgB,IAAIH,IAAMC,cAC1BG,EAAiB,IAAIJ,IAAMC,cAC3BI,EAAS,GACTC,EAAW,GACXC,EAAkB,G,OCmFTC,MApFf,WACE,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAAAD,GAAK,OAAIA,EAAME,WACnCC,EAASF,aAAY,SAAAD,GAAK,OAAIA,EAAMX,SAC1C,EAAsBe,IAAMC,SAAS,IAArC,mBAAOC,EAAP,KAAYC,EAAZ,KAEMC,EAAY,SAACC,GAEjBX,EDAmB,SAAC,GAAD,IAAGW,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,8CAAsB,WAAMZ,GAAN,uFAAAa,EAAA,sEAEzCb,EAAS,CACPc,KAAM,qBAHiC,SAMlBC,IAAMC,IAAN,oEAAuEL,EAAvE,oDANkB,OAMnCM,EANmC,OAQzCrB,EAAOsB,QAAQD,EAASE,KAAK,GAAGC,MAChCvB,EAASqB,QAAQG,IAAOJ,EAASE,KAAK,GAAGG,MAAMC,OAAO,OAShDC,EAAS,GACTC,EAAQ,GACRC,EAAQ,GACRC,EAAO,GACPC,EAAM,GACNR,EAAO,GAEJS,EAAI,EAzB4B,aAyBzBA,EAAKjB,GAzBoB,oBA0BvCc,EAAMR,QAAQD,EAASE,KAAKU,GAAGF,MAC/BF,EAAMP,QAAQD,EAASE,KAAKU,GAAGJ,OAC/BG,EAAIV,QAAQD,EAASE,KAAKU,GAAGD,KAC7BR,EAAKF,QAAQD,EAASE,KAAKU,GAAGT,MAC9BI,EAAON,QAAQG,IAAOJ,EAASE,KAAKU,GAAGP,MAAMC,OAAO,OAEhDM,IAAOjB,EAAS,EAhCmB,qDAyBXiB,IAzBW,wBAoChCA,EAAI,EApC4B,aAoCzBA,EAAIjB,GApCqB,oBAqCvCe,EAAKG,KAAKJ,EAAMG,IACZA,IAAOjB,EAAS,EAtCmB,qDAoCbiB,IApCa,wBA6CzC,IADME,EAAkB,GACfF,EAAI,EAAGA,EAAIjB,EAAQiB,IAG1BE,EAAgBb,QAAQ,CAC1Bc,MAAO,CACNC,IAA6B,KAAxBhB,EAASE,KAAKU,GAAGF,KACtBO,GAA2B,KAAvBjB,EAASE,KAAKU,GAAGD,IACrBO,GAA6B,KAAzBlB,EAASE,KAAKU,GAAGJ,OAEtBW,OAAQ,CACPC,GAA4B,KAAxBpB,EAASE,KAAKU,GAAGT,QAqBN,IAfd1B,EAAc4C,MAAMP,EAAiB,CACnCQ,WAAY,MACZC,YAAa,KACbC,KAAK,EACLC,aAAc,GACdC,SAAU,MAGDC,EAAmBlD,EAAcmD,IAAI,CACnCZ,IAAkC,KAA7BhB,EAASE,KAAKP,GAAQe,KAC3BO,GAAgC,KAA5BjB,EAASE,KAAKP,GAAQgB,IAC1BO,GAAkC,KAA9BlB,EAASE,KAAKP,GAAQa,QAGnBqB,EAAmB,GAChBjB,EAAI,EAAGA,EAAIjB,EAAQiB,IAE1BiB,EAAiB5B,QAAQ,CACvBc,MAAO,CACVC,IAA6B,KAAxBhB,EAASE,KAAKU,GAAGF,KACtBO,GAA2B,KAAvBjB,EAASE,KAAKU,GAAGD,IAClBS,GAA4B,KAAxBpB,EAASE,KAAKU,GAAGT,MAEvBgB,OAAQ,CACLD,GAA6B,KAAzBlB,EAASE,KAAKU,GAAGJ,SAkB1B,IAbA9B,EAAe2C,MAAMQ,EAAkB,CACnCN,YAAa,KACbC,KAAK,EACLC,aAAc,GACdC,SAAU,MAELI,EAAoBpD,EAAekD,IAAI,CAC1CZ,IAAkC,KAA7BhB,EAASE,KAAKP,GAAQe,KAC3BO,GAAgC,KAA5BjB,EAASE,KAAKP,GAAQgB,IAC1BO,GAAkC,KAA9BlB,EAASE,KAAKP,GAAQa,QAG1BuB,EAAiB,GACdnB,EAAI,EAAGA,EAAIjB,EAAQiB,IAE1BmB,EAAe9B,QAAQ,CACrBc,MAAO,CACPG,GAA6B,KAAzBlB,EAASE,KAAKU,GAAGJ,MACxBS,GAA2B,KAAvBjB,EAASE,KAAKU,GAAGD,IAClBS,GAA4B,KAAxBpB,EAASE,KAAKU,GAAGT,MAEvBgB,OAAQ,CACLH,IAA6B,KAAxBhB,EAASE,KAAKU,GAAGF,QAmB3B,IAdArC,EAAagD,MAAMU,EAAgB,CAC/BR,YAAa,KACbC,KAAK,EACLC,aAAc,GACdC,SAAU,MAELM,EAAkB3D,EAAauD,IAAI,CAEtCX,GAAkC,KAA9BjB,EAASE,KAAKP,GAAQa,MAC1BY,GAAiC,KAA7BpB,EAASE,KAAKP,GAAQQ,KAC1Be,GAAkC,KAA9BlB,EAASE,KAAKP,GAAQa,QAG1ByB,EAAe,GACZrB,EAAI,EAAGA,EAAIjB,EAAQiB,IAE1BqB,EAAahC,QAAQ,CACnBc,MAAO,CACLC,IAA6B,KAAxBhB,EAASE,KAAKU,GAAGF,KACtBQ,GAA6B,KAAzBlB,EAASE,KAAKU,GAAGJ,MACrBY,GAA4B,KAAxBpB,EAASE,KAAKU,GAAGT,MAEzBgB,OAAQ,CACNF,GAA2B,KAAvBjB,EAASE,KAAKU,GAAGD,OAsD7C,IAjDoBnC,EAAW6C,MAAMY,EAAc,CAC3BV,YAAa,KACbC,KAAK,EACLC,aAAc,GACdC,SAAU,MAELQ,EAAiB1D,EAAWoD,IAAI,CACnCZ,IAAkC,KAA7BhB,EAASE,KAAKP,GAAQe,KAC3BU,GAAiC,KAA7BpB,EAASE,KAAKP,GAAQQ,KAC1Be,GAAkC,KAA9BlB,EAASE,KAAKP,GAAQa,QAQ9C2B,EAAmB,GACnBC,EAAiB,GAEjBC,EAAa,IADbC,EAAgB,IAILzB,KAAKqB,EAAejB,GAAK,MACxCmB,EAAgBvB,KAAKmB,EAAgBhB,IAAM,MAC3CmB,EAAiBtB,KAAKiB,EAAkBZ,GAAK,MAC7CrC,EAAgBgC,KAAKc,EAAiBP,GAAK,MAC3CiB,EAAWxB,KAA4C,IAAtCsB,EAAmBtD,IAmBhC0D,EAAO,GACPC,EAAQ,GAEN5B,EAAI,EAAGA,EAAIjC,EAAO8D,OAAQ7B,IAC7B2B,EAAKE,QAAU9C,EAAS4C,EAAKtC,QAAQtB,EAAOiC,IAAS4B,EAAM3B,KAAK0B,EAAK,IACrEA,EAAKE,SAAW9C,GAAS6C,EAAME,OAAO,EAAEH,EAAK,IAUlD,IAPAI,QAAQnB,IAAI,SAASe,GACrBI,QAAQnB,IAAI,UAAUgB,GAGhBI,EAAM,GACNC,EAAO,GAELjC,EAAI,EAAGA,EAAI/B,EAAgB4D,OAAQ7B,IACtCgC,EAAKH,QAAU9C,EAASiD,EAAK3C,QAAQpB,EAAgB+B,IAASiC,EAAMhC,KAAK+B,EAAK,IAC9EA,EAAKH,SAAW9C,GAASkD,EAAMH,OAAO,EAAEE,EAAK,IAOlD,IALAD,QAAQnB,IAAI,cAAcoB,GAC1BD,QAAQnB,IAAI,eAAeqB,GAErBC,EAAQ,GACRC,EAAS,GACPnC,EAAI,EAAGA,EAAIhC,EAAS6D,OAAQ7B,IAC/BkC,EAAML,QAAU9C,EAASmD,EAAM7C,QAAQrB,EAASgC,IAASmC,EAAOlC,KAAKiC,EAAM,IAC3EA,EAAML,SAAW9C,GAASoD,EAAOL,OAAO,EAAEI,EAAM,IAQrD,IALAH,QAAQnB,IAAI,UAAUsB,GACtBH,QAAQnB,IAAI,WAAWuB,GAEjBC,EAAQ,GACRC,EAAS,GACPrC,EAAI,EAAGA,EAAIjC,EAAO8D,OAAQ7B,IAC7BoC,EAAMP,QAAU9C,EAASqD,EAAMnC,KAAwC,IAAlClC,EAAOiC,GAAK/B,EAAgB+B,KAAgBqC,EAAOpC,KAAKmC,EAAM,IACnGA,EAAMP,SAAW9C,GAASsD,EAAOP,OAAO,EAAGM,EAAM,IAEtDL,QAAQnB,IAAI,cAAcwB,GAC1BL,QAAQnB,IAAI,eAAeyB,GAcvBlE,EAAS,CACPc,KAAM,kBACNqD,QAAS,CACNvD,SACAqD,QACAF,QACAP,OACAK,OACAP,aACAF,mBACAC,kBACAE,iBACAnC,OACAQ,MACAD,OACAF,QACAD,YApQoC,kDAyQzCxB,EAAS,CACPc,KAAM,qBA1QiC,0DAAtB,sDCAVsD,CAAQ,CACfzD,KAAMA,EACNC,OAAQJ,MAIZ,OACI,sBAAK6D,UAAU,MAAf,UACA,sBAAKA,UAAU,SAAf,UACA,sGACA,wDAEA,qBAAKA,UAAU,QAAf,SACA,sDAEA,sBAAKA,UAAW,eAAhB,UAGC,wBAAQC,QAAS,kBAAMC,aAAY,WAAO7D,EAAU,UAAU,QAA9D,mBACC,wBAAQ4D,QAAS,kBAAM5D,EAAU,SAAjC,mBACA,wBAAQ4D,QAAS,kBAAM5D,EAAU,UAAjC,oBACA,wBAAQ4D,QAAS,kBAAM5D,EAAU,UAAjC,oBACA,wBAAQ4D,QAAS,kBAAM5D,EAAU,UAAjC,oBACA,wBAAQ4D,QAAS,kBAAM5D,EAAU,UAAjC,oBAKA,uBAAO8D,SAAU,SAAAC,GAAC,OAAIhE,EAAOgE,EAAEC,OAAOC,UACtC,wBAAQL,QAAS,kBAAMM,iBAAvB,4BAEC1E,EAAM2E,SAAW,8CAEpB,qBAAKR,UAAU,OAAf,SACE,8JAEC,qBAAKA,UAAW,gBAAhB,SACH,cAAC,OAAD,CACIlD,KAAMjB,EAAMiB,KAAM2D,QAAS,CAACC,YAAY,OAGxC,sBAAKV,UAAW,eAAhB,UACA,oBAAIA,UAAU,QAAQW,MAAO,CAACC,WAAW,SAAzC,4IAIA,oBAAIZ,UAAU,QAAQW,MAAO,CAACC,WAAW,SAAzC,2IAIG,sBAAKZ,UAAU,QAAQW,MAAO,CAACC,WAAW,SAA1C,UACE,gJACA,oBAAID,MAAO,CAACE,WAAW,SAAvB,oDAIN,sBAAKb,UAAU,YAAf,UACA,qBAAKA,UAAU,cAAcW,MAAO,CAACG,OAAO,MAAOC,MAAM,OAAzD,SACA,cAAC,MAAD,CACAjE,KAAMjB,EAAMmF,MAAOP,QAAS,CAACC,YAAY,OAGzC,qBAAKV,UAAU,cAAaW,MAAO,CAACG,OAAQ,MAAOC,MAAO,OAA1D,SACA,cAAC,QAAD,CACAjE,KAAMjB,EAAMoF,MAAOR,QAAS,CAACC,YAAY,OAGzC,qBAAKV,UAAU,cAAcW,MAAO,CAACG,OAAO,SAAUC,MAAM,oBAA5D,SACA,cAAC,OAAD,CACAjE,KAAMd,EAAOkF,MAAOT,QAAS,CAACC,YAAY,cC1E/BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdAC,EAAc,CAClBhB,SAAS,EACT1D,KAAM,CACJK,OAAQ,GACRsE,SAAU,CAAC,CACThF,KAAM,OACNiF,MAAO,YACP5E,KAAM,GACN6E,gBAAiB,0BACjBC,YAAa,uBACbC,iBAAkB,wBAKtBZ,MAAO,CACL9D,OAAQ,GACRsE,SAAU,CAAC,CACThF,KAAM,QACNiF,MAAO,uBACP5E,KAAM,GACN6E,gBAAiB,0BACjBC,YAAa,uBACbC,iBAAkB,qBAClBpB,QAAS,CACPC,YAAY,MAIlBM,MAAO,CACL7D,OAAQ,GACRsE,SAAU,CAAC,CACThF,KAAM,MACNiF,MAAO,uBACP5E,KAAM,GACN6E,gBAAiB,0BACjBC,YAAa,uBACbC,iBAAkB,qBAClBpB,QAAS,CACPC,YAAY,OAwKWoB,EAlKR,WAAkC,IAAjCjG,EAAgC,uDAAxB2F,EAAaO,EAAW,uCAC9CtF,EAAkBsF,EAAlBtF,KAAMqD,EAAYiC,EAAZjC,QAEd,OAAQrD,GACN,IAAK,mBACH,OAAO,2BACFZ,GADL,IAEE2E,SAAS,IAEb,IAAK,mBACH,OAAO,2BACF3E,GADL,IAEE2E,SAAS,IAEb,IAAK,kBACH,OAAO,2BACF3E,GADL,IAEE2E,SAAS,EACT1D,KAAM,CACJK,OAAQ2C,EAAQ3C,OAChBsE,SAAU,CAAC,CACTC,MAAO,YACP5E,KAAMgD,EAAQ1C,MACduE,gBAAiB,0BACjBC,YAAa,uBACbC,iBAAkB,qBAClBG,MAAO,GAET,CACEvF,KAAM,OACNiF,MAAO,WACP5E,KAAMgD,EAAQ/C,KACd4E,gBAAiB,wBACjBC,YAAa,sBACbC,iBAAkB,qBAClBG,MAAO,GACP,CACAvF,KAAM,OACNiF,MAAO,WACP5E,KAAMgD,EAAQxC,KACdqE,gBAAgB,yBAChBC,YAAa,uBACbC,iBAAkB,uBAClBG,MAAO,GACP,CACAvF,KAAM,OACNiF,MAAO,UACP5E,KAAMgD,EAAQvC,IACdoE,gBAAgB,yBAChBC,YAAa,uBACbC,iBAAkB,uBAClBG,MAAO,KAIXf,MAAO,CACL9D,OAAQ,CAAC,kBAAmB,mBAAoB,kBAAmB,kBACnEsE,SAAU,CAAC,CACThF,KAAM,QACNiF,MAAO,8BACP5E,KAAM,CAACgD,EAAQN,KAAK,GAAIM,EAAQN,KAAK,GAAIM,EAAQN,KAAK,GAAIM,EAAQN,KAAK,IACvEmC,gBAAiB,uBACjBC,YAAa,yBACbC,iBAAkB,qBAElBG,MAAO,GAEP,CACAvF,KAAM,QACNiF,MAAO,+BACP5E,KAAM,CAACgD,EAAQf,iBAAkBe,EAAQf,iBAAkBe,EAAQf,iBAAkBe,EAAQf,kBAC7F4C,gBAAgB,wBAChBC,YAAa,wBACbC,iBAAkB,wBAElBG,MAAO,GAET,CACEvF,KAAM,QACNiF,MAAO,8BACP5E,KAAM,CAACgD,EAAQd,gBAAiBc,EAAQd,gBAAiBc,EAAQd,gBAAiBc,EAAQd,iBAC1F2C,gBAAgB,qBAChBC,YAAa,qBACbC,iBAAkB,qBAElBG,MAAO,GAET,CACEvF,KAAM,QACNiF,MAAO,6BACP5E,KAAM,CAACgD,EAAQZ,eAAgBY,EAAQZ,eAAgBY,EAAQZ,eAAgBY,EAAQZ,gBACvFyC,gBAAgB,uBAChBC,YAAa,uBACbC,iBAAkB,uBAElBG,MAAO,KAGRhB,MAAO,CACN7D,OAAQ,CAAC,mBAAoB,mBAC7BsE,SAAU,CAAC,CACThF,KAAM,MACNiF,MAAO,eACP5E,KAAM,CAACgD,EAAQf,iBAAmBe,EAAQN,KAAK,IAC/CmC,gBAAgB,wBAChBC,YAAa,wBACbC,iBAAkB,wBAClBG,MAAO,GAET,CACEvF,KAAM,MACNiF,MAAO,eACP5E,KAAM,CAACgD,EAAQN,KAAK,GAAKM,EAAQf,kBACjC4C,gBAAiB,uBACjBC,YAAa,yBACbC,iBAAkB,qBAClBG,MAAO,GAET,CACEvF,KAAM,MACNiF,MAAO,aACP5E,KAAM,CAACgD,EAAQd,gBAAkBc,EAAQZ,gBACzCyC,gBAAiB,uBACjBC,YAAa,yBACbC,iBAAkB,qBAClBG,MAAO,GAET,CACEvF,KAAM,MACNiF,MAAO,aACP5E,KAAM,CAACgD,EAAQZ,eAAiBY,EAAQd,iBACxC2C,gBAAiB,0BACjBC,YAAa,0BACbC,iBAAkB,0BAClBG,MAAO,GAET,CACEvF,KAAM,MACNiF,MAAO,8BACP5E,KAAM,CAACgD,EAAQX,KAAOW,EAAQN,MAC9BmC,gBAAiB,oBACjBC,YAAa,eACbC,iBAAkB,eAClBG,MAAO,GACK,CACZvF,KAAM,MACNiF,MAAO,8BACP5E,KAAM,CAACgD,EAAQN,KAAOM,EAAQX,MAC9BwC,gBAAiB,oBACjBC,YAAa,eACbC,iBAAkB,eAClBG,MAAO,MAIRvB,QAAQ,CACNC,YAAa,KAGZ,QAAS,OAAO7E,IC9M1B2F,EAAc,CAChBS,SAAS,EACTnF,KAAM,CACFK,OAAQ,GACRsE,SAAU,CAAC,CACThF,KAAM,OACNiF,MAAO,+BACP5E,KAAM,GACN6E,gBAAiB,0BACjBC,YAAa,uBACbC,iBAAkB,qBAClBpB,QAAS,CACPyB,OAAQ,CACJC,EAAG,CACCC,MAAO,CAEHC,SAAU,SAAS/B,EAAOgC,EAAOC,GAC7B,MAAO,IAAMjC,WAgFbkC,EArEP,WAAkC,IAAjC3G,EAAgC,uDAAxB2F,EAAaO,EAAW,uCAC1CtF,EAAkBsF,EAAlBtF,KAAMqD,EAAYiC,EAAZjC,QAEd,OAAQrD,GACJ,IAAK,mBACH,OAAO,2BACFZ,GADL,IAEE2E,SAAS,IAEb,IAAK,mBACH,OAAO,2BACF3E,GADL,IAEE2E,SAAS,IAEb,IAAK,kBAED,OAAO,2BACA3E,GADP,IAEI2E,SAAS,EACTU,MAAO,CACD/D,OAAQ2C,EAAQJ,MAChB+B,SAAU,CAAC,CACThF,KAAM,OACNiF,MAAO,CAAC,mBACR5E,KAAMgD,EAAQX,KACdwC,gBAAiB,oBACjBC,YAAa,eACbC,iBAAkB,eAClBG,MAAO,EACPvB,QAAS,CACLyB,OAAQ,CACJC,EAAG,MAIb,CACE1F,KAAM,OACNiF,MAAO,kBACP5E,KAAMgD,EAAQN,KACdmC,gBAAiB,uBACjBC,YAAa,yBACbC,iBAAkB,qBAClBG,MAAO,EACPvB,QAAS,CACLyB,OAAQ,CACJC,EAAG,MAIb,CACE1F,KAAM,OACNiF,MAAO,CAAC,YAAa,YAAa,YAAa,aAC/C5E,KAAMgD,EAAQF,MACd+B,gBAAiB,uBACjBC,YAAa,yBACbC,iBAAkB,uBAClBG,MAAO,EACPvB,QAAS,CACLyB,OAAQ,CACJC,EAAG,UAOlB,QAAS,OAAOtG,ICvFlB4G,EALKC,0BAAgB,CAClC3G,QAAS+F,EACT5G,MAAOsH,I,kBCIMG,EALDC,sBACZH,EACAI,8BAAoBC,0BAAgBC,OCCtCC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEAO,SAASC,eAAe,SLuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.4b0a32a9.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nimport brain from 'brain.js/src/index';\r\nconst RightHighNet = new brain.NeuralNetwork();\r\nconst LeftLowNet = new brain.NeuralNetwork();\r\nconst CenterOpenNet = new brain.NeuralNetwork();\r\nconst CenterCloseNet = new brain.NeuralNetwork();\r\nconst OpenVS = [];\r\nconst lableBox = [];\r\nconst OpenBrainResult = [];\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getData = ({ time, number }) => async dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: \"AWAITING_BITCOIN\"\r\n    })\r\n     //FREE APIKEY HERE--->https://financialmodelingprep.com/developer/docs/\r\n    const response = await axios.get(`https://financialmodelingprep.com/api/v3/historical-chart/${time}/BTCUSD?apikey=df8f3193c67e3f800048dc4863a1984e`)\r\n    //console.log(\"response\", response.data)\r\n    OpenVS.unshift(response.data[0].open)\r\n    lableBox.unshift(moment(response.data[0].date).format(\"LT\"))\r\n    //const testMap = response.data.map( ()  => `${open}) [${high} - ${low} - ${close}]`);\r\n    //console.log(testMap)\r\n\r\n\r\n\r\n\r\n\r\n   \r\n    const labels = [];\r\n    const close = [];\r\n    const highA = [];\r\n    const high = [];\r\n    const low = [];\r\n    const open = [];\r\n \r\n    for (let i = 0; i < (number); i++) {\r\n      highA.unshift(response.data[i].high)\r\n      close.unshift(response.data[i].close)\r\n      low.unshift(response.data[i].low)\r\n      open.unshift(response.data[i].open)\r\n      labels.unshift(moment(response.data[i].date).format(\"LT\"))\r\n\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n    for (let i = 0; i < number; i++) {\r\n      high.push(highA[i])\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n  //  console.log('LAST OPEN PRICE: ', response.data[0].open)\r\n// THE CENTER BRAIN OPEN PRICE PREDICTION\r\n    const CenterOpenBrain = [];\r\n    for (let i = 0; i < number; i++) {\r\n\r\n\r\n      CenterOpenBrain.unshift({\r\n\t\t  input: {\r\n\t\t\t  hgh: response.data[i].high * 0.00001,\r\n\t\t\t  lw: response.data[i].low * 0.00001,\r\n\t\t\t  cl: response.data[i].close * 0.00001,\r\n\t\t\t      },\r\n\t\t  output: {\r\n\t\t\t  op: response.data[i].open * 0.00001,\r\n\t\t\t\t\t}\r\n        })\r\n      }\r\n     // console.log('BRAIN OPEN PRICE TRAINING ARRAY : ', CenterOpenBrain)\r\n\r\n      CenterOpenNet.train(CenterOpenBrain, {\r\n        iterations: 20500,\r\n        errorThresh: 0.0005,\r\n        log: false,\r\n        learningRate: 0.3,\r\n        momentum: 0.08\r\n           });\r\n\r\n           const CenterOpenResult = CenterOpenNet.run({\r\n                   hgh: response.data[number].high * 0.00001 ,\r\n                   lw: response.data[number].low * 0.00001,\r\n                   cl: response.data[number].close * 0.00001,\r\n                    });//console.log(CenterOpenNet)\r\n// THE CENTER BRAIN CLOSE PRICE PREDICTION\r\n                    const CenterCloseBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      CenterCloseBrain.unshift({\r\n                        input: {\r\n\t\t\t                  hgh: response.data[i].high * 0.00001,\r\n\t\t\t                  lw: response.data[i].low * 0.00001,\r\n                        op: response.data[i].open * 0.00001\r\n                      },\r\n                      output: {\r\n                         cl: response.data[i].close * 0.00001\r\n                        }\r\n                      })\r\n                    }\r\n                 //   console.log('BRAIN CLOSE PRICE TRAINING ARRAY : ', CenterCloseBrain)\r\n                    CenterCloseNet.train(CenterCloseBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const CenterCloseResult = CenterCloseNet.run({\r\n                          hgh: response.data[number].high * 0.00001,\r\n                          lw: response.data[number].low * 0.00001,\r\n                          cl: response.data[number].close * 0.00001,\r\n                        });\r\n         // THE RIGHT BRAIN HIGH PRICE PREDICTION\r\n                    const RightHighBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      RightHighBrain.unshift({\r\n                        input: {\r\n                        cl: response.data[i].close * 0.00001,\r\n\t\t\t                  lw: response.data[i].low * 0.00001,\r\n                        op: response.data[i].open * 0.00001\r\n                      },\r\n                      output: {\r\n                         hgh: response.data[i].high * 0.00001,\r\n                        }\r\n                      })\r\n                    }\r\n                //    console.log('BRAIN HIGH PRICE TRAINING ARRAY :', RightHighBrain)\r\n                    RightHighNet.train(RightHighBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const RightHighResult = RightHighNet.run({\r\n                          \r\n                          lw: response.data[number].close * 0.00001,\r\n                          op: response.data[number].open * 0.00001,\r\n                          cl: response.data[number].close * 0.00001,\r\n                        });\r\n       // THE LEFT BRAIN LOW PRICE PREDICTION\r\n                    const LeftLowBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      LeftLowBrain.unshift({\r\n                        input: {\r\n                          hgh: response.data[i].high * 0.00001,\r\n                          cl: response.data[i].close * 0.00001,\r\n                          op: response.data[i].open * 0.00001\r\n                      },\r\n                      output: {\r\n                        lw: response.data[i].low * 0.00001,\r\n                      }\r\n                      })\r\n                    }\r\n                 //   console.log('BRAIN LOW PRICE TRAINING ARRAY :', LeftLowBrain)\r\n                    LeftLowNet.train(LeftLowBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const RightLowResult = LeftLowNet.run({\r\n                          hgh: response.data[number].high * 0.00001,\r\n                          op: response.data[number].open * 0.00001,\r\n                          cl: response.data[number].close * 0.00001,\r\n                        });\r\n\r\n//console.log('OPEN PREDICTION: ', CenterOpenResult.op / 0.00001 );\r\n//console.log('CLOSE PREDICTION: ', CenterCloseResult.cl / 0.00001 );\r\n//console.log('HIGH PREDICTION: ', RightHighResult.hgh / 0.00001);\r\n//console.log('LOW PREDICTION: ', RightLowResult.lw / 0.00001);\r\n\r\nconst CloseBrainResult = [];\r\nconst HighBrainResult =[];\r\nconst LowBrainResult =[];\r\nconst resultRvsL = [];\r\n\r\n\r\n  LowBrainResult.push(RightLowResult.lw / 0.00001);\r\n  HighBrainResult.push(RightHighResult.hgh / 0.00001);\r\n  CloseBrainResult.push(CenterCloseResult.cl / 0.00001);\r\n  OpenBrainResult.push(CenterOpenResult.op / 0.00001);\r\n  resultRvsL.push((CloseBrainResult + OpenBrainResult) * .5);\r\n\r\n  \r\n\r\n\r\n // OPEN.unshift(response.data[0].open);\r\n\r\n \r\n  //OPEN.splice(OPEN.length, 0, OPEN);\r\n  //OPEN[OPEN.length] = OPEN[0];\r\n  //console.log('LAST OPEN PRICE: ', OPEN)\r\n // const OP = OPEN[0];\r\n  //console.log('LAST OPEN PRICE: ', OP);\r\n//console.log(OPEN)\r\n//let d = response.data[0].open;\r\n//const OPEN = [];\r\n//d = [d];\r\n\r\n\r\nconst opVS = [];\r\nconst opVSI = [];\r\n\r\nfor(let i = 0; i < OpenVS.length; i++) {\r\n  if(opVS.length <= number) {opVS.unshift(OpenVS[i])}else{opVSI.push(opVS[0])}   \r\n  if(opVS.length === number) {opVSI.splice(0,opVS[0])}                              \r\n  \r\n}\r\nconsole.log(\"Open: \",opVS)\r\nconsole.log(\"OpenI: \",opVSI)\r\n\r\n\r\nconst brOP =[];\r\nconst brOPI =[];\r\n\r\nfor(let i = 0; i < OpenBrainResult.length; i++) {\r\n  if(brOP.length <= number) {brOP.unshift(OpenBrainResult[i])}else{brOPI.push(brOP[0])}   \r\n  if(brOP.length === number) {brOPI.splice(0,brOP[0])} \r\n}\r\nconsole.log(\"brainOpen: \",brOP)\r\nconsole.log(\"brainOpenI: \",brOPI)\r\n\r\nconst laBox = [];\r\nconst laBoxI = [];\r\nfor(let i = 0; i < lableBox.length; i++) {\r\n  if(laBox.length <= number) {laBox.unshift(lableBox[i])}else{laBoxI.push(laBox[0])}   \r\n  if(laBox.length === number) {laBoxI.splice(0,laBox[0])} \r\n  \r\n}\r\nconsole.log(\"lable: \",laBox)\r\nconsole.log(\"lableI: \",laBoxI)\r\n\r\nconst midOP = [];\r\nconst midOPI = [];\r\nfor(let i = 0; i < OpenVS.length; i++) {\r\n  if(midOP.length <= number) {midOP.push((OpenVS[i] + OpenBrainResult[i]) * 0.5)}else{midOPI.push(midOP[0])}   \r\n  if(midOP.length === number) {midOPI.splice(0, midOP[0])}\r\n}\r\nconsole.log(\"midleLine: \",midOP)\r\nconsole.log(\"midleLineI: \",midOPI)\r\n\r\n\r\n\r\n//const original = [response.data[0].open];\r\n//let newArray;\r\n\r\n//newArray = original.concat(response.data[0].open);\r\n//newArray = [...original, response.data[0].open];\r\n//OPEN.push(newArray)\r\n//console.log(OPEN)\r\n\r\n\r\n\r\n    dispatch({\r\n      type: \"SUCCESS_BITCOIN\",\r\n      payload: {\r\n         number,\r\n         midOP,\r\n         laBox,\r\n         opVS,\r\n         brOP,\r\n         resultRvsL,\r\n         CloseBrainResult,\r\n         HighBrainResult,\r\n         LowBrainResult,\r\n         open,\r\n         low,\r\n         high,\r\n         close,\r\n         labels\r\n      }\r\n    })\r\n    \r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"REJECTED_BITCOIN\",\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Radar } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"./actions/bitcoinActions\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state.bitcoin)\r\n  const stateB = useSelector(state => state.brain)\r\n  const [num, setNum] = React.useState(50);\r\n    \r\n  const fetchData = (time) => {\r\n    //Fetch data from redux using time\r\n    dispatch(getData({\r\n      time: time,\r\n      number: num,\r\n    }))\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n      <div className=\"navbar\">\r\n      <h1>ARTIFICIAL INTELIGENCE 🕯CANDLESTICK🕯 PREDICTOR</h1>\r\n      <h5>POWERED BY BRAIN.JS</h5>\r\n      </div>\r\n      <div className=\"title\">\r\n      <h2>BTC/USD Timeseries</h2>\r\n      </div>\r\n      <div className={\"btns-wrapper\"}>\r\n      \r\n        \r\n       <button onClick={() => setInterval(() => {fetchData(\"1min\")}, 60100)}>1 Min</button>\r\n        <button onClick={() => fetchData(\"5min\")}>5 Min</button>\r\n        <button onClick={() => fetchData(\"15min\")}>15 Min</button>\r\n        <button onClick={() => fetchData(\"30min\")}>30 Min</button>\r\n        <button onClick={() => fetchData(\"1hour\")}>1 hour</button>\r\n        <button onClick={() => fetchData(\"4hour\")}>4 hour</button>\r\n\r\n\r\n\r\n        \r\n        <input onChange={e => setNum(e.target.value)} />\r\n        <button onClick={() => clearInterval()}>Pause Interval</button>\r\n     \r\n        {state.loading && <p>Loading...</p>}\r\n      </div>\r\n      <div className=\"info\">\r\n        <h4>Default Chart settings is set to 55 data points(x4,op,cl.hgh.lw) Interval of 1 min. Specifying any amount of data points .</h4>\r\n      </div>\r\n         <div className={\"chart-wrapper\"}>\r\n      <Line\r\n          data={state.data} options={{responsive: true}}\r\n      /></div>\r\n\r\n          <div className={'explaination'}>\r\n          <h3 className=\"infoB\" style={{marginLeft:'150px'}}>\r\n            IF THE OPEN IS GREATER THEN THE CLOSE \r\n            THE SNAPSHOT USED TO FORCE TRAIN THE BRAIN \r\n            IS PREDICTING  A RED  ⬇BAR  🟥</h3>\r\n          <h3 className=\"infoB\" style={{marginLeft:'150px'}}>\r\n            IF THE CLOSE IS GREATER THEN THE OPEN\r\n             THE SNAPSHOT USED TO FORCE TRAIN THE BRAIN\r\n             IS PREDICTING A GREEN ⬆BAR 🟩</h3>\r\n             <div className='infoC' style={{marginLeft:'150px'}}>\r\n               <h4>⚠WARNING: PREDICTION CAN BE GREEN 🟩BAR AND YET CANDLESTICK CAN OPEN LOWER THEN LAST OPEN PRICE</h4>\r\n               <h5 style={{marginleft:'150px'}}>MORE INFO IN THE DEVELOPER TOOLS</h5>\r\n             </div>\r\n             </div>\r\n\r\n         <div className='container'>\r\n         <div className='chartBarVol' style={{height:'80%', width:'80%'}}>\r\n         <Bar\r\n         data={state.dataC} options={{responsive: true}}\r\n         /></div>\r\n\r\n         <div className='chartBarRad'style={{height: '80%', width: '80%'}}>\r\n         <Radar\r\n         data={state.dataB} options={{responsive: true}}\r\n         /></div>\r\n\r\n         <div className='chartBarLin' style={{height:'2100px', width:'fit-content(100)'}}>\r\n         <Line \r\n         data={stateB.dataD} options={{responsive: true}}\r\n         /></div>\r\n      </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//Random color generator\r\n//var r = () => Math.random() * 256 >> 0;\r\n//var color = `rgb(${r()}, ${r()}, ${r()})`;\r\n//import number from '../App'\r\nconst initalState = {\r\n  loading: false,\r\n  data: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'line',\r\n      label: \"BTC close\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n\r\n    }],\r\n    \r\n  },\r\n  dataB: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'radar',\r\n      label: \"BOT CHART PREDICTION\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      options: {\r\n        responsive: true\r\n      }\r\n    }]\r\n  },\r\n  dataC: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'bar',\r\n      label: \"BOT CHART PREDICTION\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      options: {\r\n        responsive: true\r\n      }\r\n    }]\r\n  },\r\n};\r\n\r\nconst bitcoinReducer = (state = initalState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"AWAITING_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case \"REJECTED_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case \"SUCCESS_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: {\r\n          labels: payload.labels,\r\n          datasets: [{\r\n            label: \"BTC CLOSE\",\r\n            data: payload.close,\r\n            backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n            borderColor: 'rgba(178, 116, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 3\r\n          },\r\n          {\r\n            type: 'line',\r\n            label: \"BTC OPEN\",\r\n            data: payload.open,\r\n            backgroundColor: 'rgba(10, 204, 0, 0.3)',\r\n            borderColor: 'rgba(10, 204, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 2\r\n          },{\r\n            type: 'line',\r\n            label: \"BTC HIGH\",\r\n            data: payload.high,\r\n            backgroundColor:'rgba(22, 91, 160, 0.9)',\r\n            borderColor: 'rgba(14, 38, 62,0.9)',\r\n            pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n            order: 4               \r\n          },{\r\n            type: 'line',\r\n            label: \"BTC LOW\",\r\n            data: payload.low,\r\n            backgroundColor:'rgba(233, 190, 0, 0.9)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            order: 1\r\n          }],\r\n\r\n       },\r\n        dataB: {\r\n          labels: ['OpenBrainResult', 'CloseBrainResult', 'HighBrainResult', 'LowBrainResult'],\r\n          datasets: [{\r\n            type: 'radar',\r\n            label: \"OPEN PRICE BRAIN PREDICTION\",\r\n            data: [payload.brOP[0], payload.brOP[0], payload.brOP[0], payload.brOP[0]],// + (number + 1)],\r\n            backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n            borderColor: '\trgba(255, 0, 0, 0.9)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n\r\n            order: 1\r\n            },\r\n            {\r\n            type: 'radar',\r\n            label: \"CLOSE PRICE BRAIN PREDICTION\",\r\n            data: [payload.CloseBrainResult, payload.CloseBrainResult, payload.CloseBrainResult, payload.CloseBrainResult],\r\n            backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n            borderColor: 'rgba(10, 204, 0, 0.9)',\r\n            pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n\r\n            order: 2\r\n          },\r\n          {\r\n            type: 'radar',\r\n            label: \"HIGH PRICE BRAIN PREDICTION\",\r\n            data: [payload.HighBrainResult, payload.HighBrainResult, payload.HighBrainResult, payload.HighBrainResult],\r\n            backgroundColor:'rgba(0,0,255, 0.7)',\r\n            borderColor: 'rgba(0,0,255, 0.9)',\r\n            pointBorderColor: 'rgba(0,0,255, 0.8)',\r\n\r\n            order: 3\r\n          },\r\n          {\r\n            type: 'radar',\r\n            label: \"LOW PRICE BRAIN PREDICTION\",\r\n            data: [payload.LowBrainResult, payload.LowBrainResult, payload.LowBrainResult, payload.LowBrainResult],\r\n            backgroundColor:'rgba(255,255,0, 0.8)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n\r\n            order: 4\r\n          }]\r\n          },\r\n           dataC: {\r\n            labels: ['Close Prediction', 'Open Prediction'],\r\n            datasets: [{\r\n              type: 'bar',\r\n              label: \"Close - Open\",\r\n              data: [payload.CloseBrainResult - payload.brOP[0]],\r\n              backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n              borderColor: 'rgba(10, 204, 0, 0.9)',\r\n              pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n              order: 5\r\n            },\r\n            {\r\n              type: 'bar',\r\n              label: \"Open - Close\",\r\n              data: [payload.brOP[0] - payload.CloseBrainResult],\r\n              backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n              borderColor: '\trgba(255, 0, 0, 0.9)',\r\n              pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n              order: 6\r\n            },\r\n            {\r\n              type: 'bar',\r\n              label: \"High - Low\",\r\n              data: [payload.HighBrainResult - payload.LowBrainResult],\r\n              backgroundColor: 'rgba(46, 80, 255, 1)',\r\n              borderColor: 'rgba(46, 80, 255, 0.6)',\r\n              pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n              order: 7\r\n            },\r\n            {\r\n              type: 'bar',\r\n              label: \"Low - High\",\r\n              data: [payload.LowBrainResult - payload.HighBrainResult],\r\n              backgroundColor: 'rgba(255, 229, 46, 0.9)',\r\n              borderColor: 'rgba(255, 229, 46, 0.6)',\r\n              pointBorderColor: 'rgba(255, 229, 46, 0.9)',\r\n              order: 8\r\n            },\r\n            {\r\n              type: 'bar',\r\n              label: \"Real Time - Open Prediction\",\r\n              data: [payload.opVS - payload.brOP],\r\n              backgroundColor: 'rgb(0, 0, 0, 0.6)',\r\n              borderColor: 'rgb(0, 0, 0)',\r\n              pointBorderColor: 'rgb(0, 0, 0)',\r\n              order: 9\r\n            },            {\r\n              type: 'bar',\r\n              label: \"Open Prediction - Real Time\",\r\n              data: [payload.brOP - payload.opVS],\r\n              backgroundColor: 'rgb(0, 0, 0, 0.6)',\r\n              borderColor: 'rgb(0, 0, 0)',\r\n              pointBorderColor: 'rgb(0, 0, 0)',\r\n              order: 10\r\n            }\r\n           ],\r\n           },\r\n             options:{\r\n               responsive : true\r\n                }\r\n               }\r\n                default: return state;\r\n                }\r\n               }\r\n                export default bitcoinReducer;\r\n      \r\n","\r\n\r\nconst initalState = {\r\n    Loading: false,\r\n    data: {\r\n        labels: [],\r\n        datasets: [{\r\n          type: 'line',\r\n          label: \"Real Time vs Open Prediction\",\r\n          data: [],\r\n          backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n          borderColor: 'rgba(178, 116, 0, 1)',\r\n          pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n          options: {\r\n            scales: {\r\n                x: {\r\n                    ticks: {\r\n                        // Include a dollar sign in the ticks\r\n                        callback: function(value, index, values) {\r\n                            return '$' + value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        }],\r\n        \r\n      }\r\n\r\n}\r\nconst brainReducer = (state = initalState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case \"AWAITING_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: true\r\n          }\r\n        case \"REJECTED_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: false,\r\n          }\r\n        case \"SUCCESS_BITCOIN\":\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                dataD: {\r\n                      labels: payload.laBox,\r\n                      datasets: [{\r\n                        type: \"line\",\r\n                        label: [\"REAL-Time Price\" ],\r\n                        data: payload.opVS,\r\n                        backgroundColor: 'rgb(0, 0, 0, 0.6)',\r\n                        borderColor: 'rgb(0, 0, 0)',\r\n                        pointBorderColor: 'rgb(0, 0, 0)',\r\n                        order: 1,\r\n                        options: {\r\n                            scales: {\r\n                                x: 50\r\n                            }\r\n                        }\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"OPEN PREDICTION\",\r\n                        data: payload.brOP,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 2,\r\n                        options: {\r\n                            scales: {\r\n                                x: 50\r\n                            }\r\n                        }\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: [\"fib(0.34)\", \"fib(0.21)\", \"fib(0.13)\", \"fib(0.08)\"],\r\n                        data: payload.midOP,// [payload.midOP * 0.21, payload.midOP * 0.13, payload.midOP * 0.08],\r\n                        backgroundColor: 'rgba(255,255,0, 0.7)',\r\n                        borderColor: '\trgba(255, 255, 0, 1)',\r\n                        pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                        order: 3,\r\n                        options: {\r\n                            scales: {\r\n                                x: 50\r\n                            }\r\n                        }\r\n                      },\r\n                    ]\r\n                  },\r\n                }\r\n                 default: return state;\r\n                }\r\n             }\r\n             export default brainReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport bitcoinReducer from \"./bitcoinReducer\";\r\nimport brainReducer from \"./brainReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  bitcoin: bitcoinReducer,\r\n  brain: brainReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}