{"version":3,"sources":["actions/bitcoinActions.js","App.js","serviceWorker.js","reducers/bitcoinReducer.js","reducers/brainReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["RightHighNet","brain","NeuralNetwork","LeftLowNet","CenterOpenNet","CenterCloseNet","OpenVS","CloseVS","HighVS","LowVS","lableBox","OpenBrainResult","CloseBrainResult","HighBrainResult","LowBrainResult","App","dispatch","useDispatch","state","useSelector","bitcoin","stateB","React","useState","num","setNum","fetchData","time","number","a","type","axios","get","response","unshift","data","open","close","high","low","moment","date","format","labels","highA","openMA","i","push","finalOpenMA","depth","length","CenterOpenBrain","input","opma","hgh","lw","cl","output","op","train","iterations","errorThresh","log","learningRate","momentum","CenterOpenResult","run","CenterCloseBrain","CenterCloseResult","RightHighBrain","RightHighResult","LeftLowBrain","LeftLowResult","lowVS","lowVSI","splice","console","hghVS","hghVSI","clVS","clVSI","opVS","opVSI","brOP","brOPI","LowPredicted","RealLow","HghPredicted","RealHigh","ClsPredicted","RealClose","RvsPredicted","PvsReal","laBox","laBoxI","midOP","midOPI","payload","getData","className","style","marginLeft","marginRight","onClick","setInterval","onChange","e","target","value","clearInterval","loading","options","responsive","height","width","dataC","dataD","Boolean","window","location","hostname","match","initalState","datasets","label","backgroundColor","borderColor","pointBorderColor","borderWidth","bitcoinReducer","action","order","Loading","dataB","scales","x","ticks","callback","index","values","brainReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea49e720.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nimport brain from 'brain.js/src/index';\r\nconst RightHighNet = new brain.NeuralNetwork();\r\nconst LeftLowNet = new brain.NeuralNetwork();\r\nconst CenterOpenNet = new brain.NeuralNetwork();\r\nconst CenterCloseNet = new brain.NeuralNetwork();\r\n\r\nconst OpenVS = [];\r\nconst CloseVS = [];\r\nconst HighVS = [];\r\nconst LowVS = [];\r\nconst lableBox = [];\r\nconst OpenBrainResult = [];\r\nconst CloseBrainResult = [];\r\nconst HighBrainResult = [];\r\nconst LowBrainResult = [];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getData = ({ time, number }) => async dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: \"AWAITING_BITCOIN\"\r\n    })\r\n     //FREE APIKEY HERE--->https://financialmodelingprep.com/developer/docs/\r\n    const response = await axios.get(`https://financialmodelingprep.com/api/v3/historical-chart/${time}/BTCUSD?apikey=df8f3193c67e3f800048dc4863a1984e`)\r\n\r\n     \r\n    OpenVS.unshift(response.data[0].open);\r\n    CloseVS.unshift(response.data[0].close);\r\n    HighVS.unshift(response.data[0].high);\r\n    LowVS.unshift(response.data[0].low);\r\n    lableBox.unshift(moment(response.data[0].date).format(\"LT\"));\r\n\r\n    //console.log(depth)\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n    const labels = [];\r\n    const close = [];\r\n    const highA = [];\r\n    const high = [];\r\n    const low = [];\r\n    const open = [];\r\n    const openMA = [];\r\n\r\n    for (let i = 0; i < (number); i++) {\r\n     // let depth = response.data.length;\r\n      highA.unshift(response.data[i].high)\r\n      close.unshift(response.data[i].close)\r\n      low.unshift(response.data[i].low)\r\n      open.unshift(response.data[i].open)\r\n      openMA.push(response.data[i].open)\r\n      labels.unshift(moment(response.data[i].date).format(\"LT\"))\r\n\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n    for (let i = 0; i < number; i++) {\r\n      high.push(highA[i])\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    const finalOpenMA = [];\r\n    for (let depth = 0; depth < openMA.length; depth ++) {\r\n      finalOpenMA.push((openMA[depth] + openMA[depth + 1] + openMA[depth + 2] +  openMA[depth + 2]) * 0.25) \r\n    }\r\n //console.log('OPEN MA: ', openMA);\r\n //console.log('OPEN MA: ', finalOpenMA)\r\n\r\n// THE CENTER BRAIN OPEN PRICE PREDICTION\r\n    const CenterOpenBrain = [];\r\n    for (let i = 0; i < number; i++) {\r\n\r\n\r\n      CenterOpenBrain.unshift({\r\n\t\t  input: {\r\n      opma: finalOpenMA[i] * 0.00001,\r\n\t\t\t hgh: response.data[i].high * 0.00001,\r\n\t\t\t  lw: response.data[i].low * 0.00001,\r\n\t\t\t  cl: response.data[i].close * 0.00001,\r\n\t\t\t      },\r\n\t\t  output: {\r\n\t\t\t  op: response.data[i].open * 0.00001,\r\n\t\t\t\t\t}\r\n        })\r\n      }\r\n     // console.log('BRAIN OPEN PRICE TRAINING ARRAY : ', CenterOpenBrain)\r\n\r\n      CenterOpenNet.train(CenterOpenBrain, {\r\n        iterations: 20500,\r\n        errorThresh: 0.0005,\r\n        log: false,\r\n        learningRate: 0.3,\r\n        momentum: 0.08\r\n           });\r\n\r\n           const CenterOpenResult = CenterOpenNet.run({\r\n                  opma: finalOpenMA[0] * 0.00001,\r\n                   hgh: response.data[0].high * 0.00001 ,\r\n                    lw: response.data[0].low * 0.00001,\r\n                    cl: response.data[0].close * 0.00001,\r\n                    });//console.log(finalOpenMA[0])\r\n// THE CENTER BRAIN CLOSE PRICE PREDICTION\r\n                    const CenterCloseBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      CenterCloseBrain.unshift({\r\n                        input: {\r\n                    //  clma: response.data[i].close * 0.00001 + response.data[i - 1].close * 0.00001 + response.data[i - 2].close * 0.00001 * 0.33333333,\r\n\t\t\t                 hgh: response.data[i].high * 0.00001,\r\n\t\t\t                  lw: response.data[i].low * 0.00001,\r\n                        op: response.data[i].open * 0.00001\r\n                      },\r\n                      output: {\r\n                         cl: response.data[i].close * 0.00001\r\n                        }\r\n                      })\r\n                    }\r\n                 //   console.log('BRAIN CLOSE PRICE TRAINING ARRAY : ', CenterCloseBrain)\r\n                    CenterCloseNet.train(CenterCloseBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const CenterCloseResult = CenterCloseNet.run({\r\n                      //  clma: response.data[number].close * 0.00001 + response.data[number - 1].close * 0.00001 + response.data[number - 2].close * 0.00001 * 0.33333333,\r\n                         hgh: response.data[0].high * 0.00001,\r\n                          lw: response.data[0].low * 0.00001,\r\n                          op: response.data[0].open * 0.00001,\r\n                        });\r\n         // THE RIGHT BRAIN HIGH PRICE PREDICTION\r\n                    const RightHighBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      RightHighBrain.unshift({\r\n                        input: {\r\n                       //  hghma: response.data[i].high * 0.00001 + response.data[i - 1].high * 0.00001 + response.data[i - 2].high * 0.00001 * 0.33333333,\r\n                            cl: response.data[i].close * 0.00001,\r\n\t\t\t                      lw: response.data[i].low * 0.00001,\r\n                            op: response.data[i].open * 0.00001\r\n                      },\r\n                      output: {\r\n                         hgh: response.data[i].high * 0.00001,\r\n                        }\r\n                      })\r\n                    }\r\n                //    console.log('BRAIN HIGH PRICE TRAINING ARRAY :', RightHighBrain)\r\n                    RightHighNet.train(RightHighBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const RightHighResult = RightHighNet.run({\r\n                     //  hghma: response.data[number].high * 0.00001 + response.data[number - 1].high * 0.00001 + response.data[number - 2].high * 0.00001 * 0.33333333,\r\n                          lw: response.data[0].low * 0.00001,\r\n                          op: response.data[0].open * 0.00001,\r\n                          cl: response.data[0].close * 0.00001,\r\n                        });\r\n                      \r\n                      /*\r\n                      //  test the data \r\n                        let a = [];\r\n                        a.push(response.data[0].high)\r\n                        console.log(a)\r\n                        */\r\n\r\n       // THE LEFT BRAIN LOW PRICE PREDICTION\r\n                    const LeftLowBrain = [];\r\n                    for (let i = 0; i < number; i++) {\r\n\r\n                      LeftLowBrain.unshift({\r\n                        input: {\r\n                         \r\n                          hgh: response.data[i].high * 0.00001,\r\n                          cl: response.data[i].close * 0.00001,\r\n                          op: response.data[i].open * 0.00001\r\n                      },\r\n                      output: {\r\n                        lw: response.data[i].low * 0.00001,\r\n                      }\r\n                      })\r\n                    }\r\n                 //   console.log('BRAIN LOW PRICE TRAINING ARRAY :', LeftLowBrain)\r\n                    LeftLowNet.train(LeftLowBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const LeftLowResult = LeftLowNet.run({\r\n                      \r\n                         hgh: response.data[0].high * 0.00001,\r\n                          op: response.data[0].open * 0.00001,\r\n                          cl: response.data[0].close * 0.00001,\r\n                        });\r\n\r\n//console.log('OPEN PREDICTION: ', CenterOpenResult.op / 0.00001 );\r\n//console.log('CLOSE PREDICTION: ', CenterCloseResult.cl / 0.00001 );\r\n//console.log('HIGH PREDICTION: ', RightHighResult.hgh / 0.00001);\r\n//console.log('LOW PREDICTION: ', RightLowResult.lw / 0.00001);\r\n\r\n\r\n  LowBrainResult.unshift(LeftLowResult.lw / 0.00001);\r\n  HighBrainResult.unshift(RightHighResult.hgh / 0.00001);\r\n  CloseBrainResult.unshift(CenterCloseResult.cl / 0.00001);\r\n  OpenBrainResult.unshift(CenterOpenResult.op / 0.00001);\r\n\r\n  const lowVS = [];\r\n  const lowVSI = [];\r\n  \r\n  for(let i = 0; i < LowBrainResult.length; i++) {\r\n    if(lowVS.length <= number) {lowVS.unshift(LowBrainResult[i])}else{lowVSI.push(lowVS[0])}   \r\n    if(lowVS.length === number) {lowVSI.splice(0,lowVS[0])}                              \r\n      }\r\n\r\n  console.log(\"Low: \",lowVS)\r\n  console.log(\"LowI: \",lowVSI)\r\n\r\n  const hghVS = [];\r\n  const hghVSI = [];\r\n  \r\n  for(let i = 0; i < HighBrainResult.length; i++) {\r\n    if(hghVS.length <= number) {hghVS.unshift(HighBrainResult[i])}else{hghVSI.push(hghVS[0])}   \r\n    if(hghVS.length === number) {hghVSI.splice(0,hghVS[0])}                              \r\n    }\r\n    \r\n  console.log(\"High: \",hghVS)\r\n  console.log(\"HighI: \",hghVSI)\r\n\r\n  const clVS = [];\r\n  const clVSI = [];\r\n  \r\n  for(let i = 0; i < CloseBrainResult.length; i++) {\r\n    if(clVS.length <= number) {clVS.unshift(CloseBrainResult[i])}else{clVSI.push(clVS[0])}   \r\n    if(clVS.length === number) {clVSI.splice(0,clVS[0])}                              \r\n    \r\n  }\r\n  console.log(\"Close: \",clVS)\r\n  console.log(\"CloseI: \",clVSI)\r\n\r\n\r\nconst opVS = [];\r\nconst opVSI = [];\r\n\r\nfor(let i = 0; i < OpenVS.length; i++) {\r\n  if(opVS.length <= number) {opVS.unshift(OpenVS[i])}else{opVSI.push(opVS[0])}   \r\n  if(opVS.length === number) {opVSI.splice(0,opVS[0])}                              \r\n  \r\n}\r\nconsole.log(\"Open: \",opVS)\r\nconsole.log(\"OpenI: \",opVSI)\r\n\r\n\r\nconst brOP =[];\r\nconst brOPI =[];\r\n\r\nfor(let i = 0; i < OpenBrainResult.length; i++) {\r\n  if(brOP.length <= number) {brOP.unshift(OpenBrainResult[i])}else{brOPI.push(brOP[0])}   \r\n  if(brOP.length === number) {brOPI.splice(0,brOP[0])} \r\n}\r\n\r\nconsole.log(\"brainOpen: \",brOP)\r\nconsole.log(\"brainOpenI: \",brOPI)\r\n//console.log(\"Real vs predicted\", opVS[0] - brOP[0])\r\n//console.log(\"Predicted vs Real Open\", brOP[0] - opVS[0])\r\n//console.log('closeBrain vs Realclose', CloseBrainResult[0] - CloseVS[0])\r\n//console.log('Real high vs Predicted high', HighVS[0] - HighBrainResult[0]);\r\n//console.log('Real Low vs Predicted Low', LowVS[0] - LowBrainResult[0]);\r\n\r\nconst LowPredicted = [LowBrainResult[0] - LowVS[0]];\r\nconst RealLow = [LowVS[0] - LowBrainResult[0]];\r\n\r\nconst HghPredicted = [HighBrainResult[0] - HighVS[0]]\r\nconst RealHigh = [HighVS[0] - HighBrainResult[0]];\r\n\r\n const ClsPredicted = [CloseBrainResult[0] - CloseVS[0]];\r\n const RealClose = [CloseVS[0] - CloseBrainResult[0]];\r\n\r\n const RvsPredicted = [];\r\n for (let i = 0; i < opVS.length; i++) {\r\n        RvsPredicted.push(opVS[i] - brOP[i])\r\n }\r\n const PvsReal = [];\r\n for (let i = 0; i < opVS.length; i++) {\r\n    PvsReal.push(brOP[i] - opVS[i])\r\n }\r\n\r\nconst laBox = [];\r\nconst laBoxI = [];\r\nfor(let i = 0; i < lableBox.length; i++) {\r\n  if(laBox.length <= number) {laBox.unshift(lableBox[i])}else{laBoxI.push(laBox[0])}   \r\n  if(laBox.length === number) {laBoxI.splice(0,laBox[0])} \r\n  \r\n}\r\nconsole.log(\"lable: \",laBox)\r\nconsole.log(\"lableI: \",laBoxI)\r\n\r\nconst midOP = [];\r\nconst midOPI = [];\r\nfor(let i = 0; i < hghVS.length; i++) {\r\n  if(midOP.length <= number) {midOP.unshift(((HighBrainResult[i] + OpenBrainResult[i] + CloseBrainResult[i]) + LowBrainResult[i]) / 4)}else{midOPI.unshift(((HighBrainResult[i] + OpenBrainResult[i] + CloseBrainResult[i]) + LowBrainResult[i]) / 4)}   \r\n  if(midOP.length === number) {midOPI.splice(0, midOP[0])}\r\n}\r\nconsole.log(\"midleLine: \",midOP)\r\nconsole.log(\"midleLineI: \",midOPI)\r\n\r\n\r\n\r\n//const original = [response.data[0].open];\r\n//let newArray;\r\n\r\n//newArray = original.concat(response.data[0].open);\r\n//newArray = [...original, response.data[0].open];\r\n//OPEN.push(newArray)\r\n//console.log(OPEN)\r\n\r\n\r\n\r\n    dispatch({\r\n      type: \"SUCCESS_BITCOIN\",\r\n      payload: {\r\n         number,\r\n         midOP,\r\n         laBox,\r\n         opVS,\r\n         clVS,\r\n         hghVS,\r\n         lowVS,\r\n         brOP,\r\n\r\n         ClsPredicted,\r\n         RealClose,\r\n\r\n         HghPredicted,\r\n         RealHigh,\r\n\r\n         LowPredicted,\r\n         RealLow,\r\n\r\n         RvsPredicted,\r\n         PvsReal,\r\n            \r\n         OpenBrainResult,\r\n         CloseBrainResult,\r\n         HighBrainResult,\r\n         LowBrainResult,\r\n\r\n         open,\r\n         low,\r\n         high,\r\n         close,\r\n         labels\r\n      }\r\n    })\r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"REJECTED_BITCOIN\",\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\n//import { Radar } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"./actions/bitcoinActions\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state.bitcoin)\r\n  const stateB = useSelector(state => state.brain)\r\n  const [num, setNum] = React.useState(15);\r\n    \r\n  const fetchData = (time) => {\r\n    //Fetch data from redux using time\r\n    dispatch(getData({\r\n      time: time,\r\n      number: num,\r\n    }))\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n      <div className=\"navbar\">\r\n      <h1 style={{marginLeft:'13px', marginRight:'13px'}}>UNIVERSAL MARKET PRICE FUNCTION PREDICTOR</h1>\r\n      <h5 style={{marginLeft:'25px'}}>POWERED BY BRAIN.JS, CHART JS, REDUX AND REACT APP</h5>\r\n      </div>\r\n      <div className=\"title\">\r\n      <h2>BTC/USD Timeseries</h2>\r\n      </div>\r\n      <div className={\"btns-wrapper\"}>\r\n      \r\n        <button onClick={(() => {fetchData(\"1min\")})}>INSERT DATA</button>\r\n       <button onClick={() => setInterval(() => {fetchData(\"1min\")}, 60100)}>1 Min</button>\r\n       <button onClick={() => setInterval(() => {fetchData(\"5min\")}, 300000)}>5 Min</button>\r\n       <button onClick={() => setInterval(() => {fetchData(\"15min\")}, 900000)}>15 Min</button>\r\n       <button onClick={() => setInterval(() => {fetchData(\"30min\")}, 1800000)}>30 min</button>\r\n       <button onClick={() => setInterval(() => {fetchData(\"1hour\")}, 3600000)}>1 Hour</button>\r\n       <button onClick={() => setInterval(() => {fetchData(\"4hour\")}, 14400000)}>4 Hour</button>\r\n\r\n\r\n\r\n\r\n        \r\n        <input onChange={e => setNum(e.target.value)} />\r\n        <button onClick={() => clearInterval(\"1min\", \"5min\", \"15min\", \"30min\", \"1hour\", \"4hour\")}>Pause Interval</button>\r\n     \r\n        {state.loading && <p>Loading...</p>}\r\n      </div>\r\n      <div className=\"info\">\r\n        <h4>Default Chart settings is set to 15 data points(x4,op,cl.hgh.lw) Choose any Interval. And specify any amount of data points .</h4>\r\n        <h4>You can all so start as many interval as you want. Try only two to start example 89 min and 144 min </h4>\r\n      </div>\r\n         <div className={\"chart-wrapper\"}>\r\n      <Line\r\n          data={state.data} options={{responsive: true}}\r\n      /></div>\r\n\r\n         <div className='container'>\r\n         <div className='chartBarVol' style={{height:'80%', width:'80%'}}>\r\n         <Bar\r\n         data={stateB.dataC} options={{responsive: true}}\r\n         /></div>\r\n\r\n         <div className='chartBarLin' style={{height:'2100px', width:'fit-content(100)'}}>\r\n         <Line \r\n         data={stateB.dataD} options={{responsive: true}}\r\n         /></div>\r\n          </div>\r\n           </div>\r\n           );\r\n          }\r\n          export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//Random color generator\r\n//var r = () => Math.random() * 256 >> 0;\r\n//var color = `rgb(${r()}, ${r()}, ${r()})`;\r\n//import number from '../App'\r\nconst initalState = {\r\n  loading: false,\r\n  data: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'line',\r\n      label: \"BTC close\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      borderWidth: 0.5\r\n    }],\r\n    \r\n  },\r\n};\r\n\r\nconst bitcoinReducer = (state = initalState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"AWAITING_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case \"REJECTED_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case \"SUCCESS_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: {\r\n          labels: payload.labels,\r\n          datasets: [{\r\n            label: \"BTC CLOSE\",\r\n            data: payload.close,\r\n            backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n            borderColor: 'rgba(178, 116, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 3,\r\n            borderWidth: 0.5\r\n          },\r\n          {\r\n            type: 'line',\r\n            label: \"BTC OPEN\",\r\n            data: payload.open,\r\n            backgroundColor: 'rgba(10, 204, 0, 0.3)',\r\n            borderColor: 'rgba(10, 204, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 2,\r\n            borderWidth: 0.5\r\n          },{\r\n            type: 'line',\r\n            label: \"BTC HIGH\",\r\n            data: payload.high,\r\n            backgroundColor:'rgba(22, 91, 160, 0.9)',\r\n            borderColor: 'rgba(14, 38, 62,0.9)',\r\n            pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n            order: 4 ,\r\n            borderWidth: 0.5             \r\n          },{\r\n            type: 'line',\r\n            label: \"BTC LOW\",\r\n            data: payload.low,\r\n            backgroundColor:'rgba(246, 239, 28, 0.48)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            order: 1,\r\n            borderWidth: 0.5\r\n          }],\r\n\r\n       },\r\n\r\n        }\r\n         default: return state;\r\n          }\r\n         }\r\n          export default bitcoinReducer;\r\n      \r\n","\r\n\r\nconst initalState = {\r\n    Loading: false,\r\n    dataB: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'radar',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }]\r\n    },\r\n    dataC: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'bar',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }]\r\n    },\r\n    dataD: {\r\n        labels: [],\r\n        datasets: [{\r\n          type: 'line',\r\n          label: \"Real Time vs Open Prediction\",\r\n          data: [],\r\n          backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n          borderColor: 'rgba(178, 116, 0, 1)',\r\n          pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n          options: {\r\n            scales: {\r\n                x: {\r\n                    ticks: {\r\n                        // Include a dollar sign in the ticks\r\n                        callback: function(value, index, values) {\r\n                            return '$' + value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        }],\r\n      },\r\n\r\n}\r\nconst brainReducer = (state = initalState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case \"AWAITING_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: true\r\n          }\r\n        case \"REJECTED_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: false,\r\n          }\r\n        case \"SUCCESS_BITCOIN\":\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n              /*  dataB: {\r\n                  labels: 'OpenBrainResult',\r\n                  datasets: [\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"OPEN PRICE BRAIN PREDICTION\",\r\n                    data: payload.OpenBrainResult[0],// + (number + 1)],\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                    borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        \r\n                    order: 1\r\n                    },\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"CLOSE PRICE BRAIN PREDICTION\",\r\n                    data: payload.CloseBrainResult,\r\n                    backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                    borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n        \r\n                    order: 2\r\n                    },\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"HIGH PRICE BRAIN PREDICTION\",\r\n                    data: payload.HighBrainResult, \r\n                    backgroundColor:'rgba(0,0,255, 0.7)',\r\n                    borderColor: 'rgba(0,0,255, 0.9)',\r\n                    pointBorderColor: 'rgba(0,0,255, 0.8)',\r\n        \r\n                    order: 3\r\n                    },\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"LOW PRICE BRAIN PREDICTION\",\r\n                    data: payload.LowBrainResult,\r\n                    backgroundColor:'rgba(255,255,0, 0.8)',\r\n                    borderColor: 'rgba(255,255,0, 0.9)',\r\n                    pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n        \r\n                    order: 4\r\n                    }]\r\n                  },*/\r\n                dataD: {\r\n                      labels: payload.laBox,\r\n                      datasets: [{\r\n                        type: \"line\",\r\n                        label: \"REAL TIME OPEN\" ,\r\n                        data: payload.opVS,\r\n                        backgroundColor: 'rgb(0, 0, 0, 0.6)',\r\n                        borderColor: 'rgb(0, 0, 0)',\r\n                        pointBorderColor: 'rgb(0, 0, 0)',\r\n                        order: 1,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED OPEN\",\r\n                        data: payload.brOP,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 3,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED CLOSE\",\r\n                        data: payload.clVS,\r\n                        backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                        borderColor: '\trgba(0,0,255, 0.9)',\r\n                        pointBorderColor: 'rgba(0,0,255, 1)',\r\n                        order: 2,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED HIGH\",\r\n                        data: payload.hghVS,\r\n                        backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                        borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                        pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                        order: 4,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED LOW\",\r\n                        data: payload.lowVS,\r\n                        backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                        borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                        order: 5,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"All 4 PREDICTED MOVING AVERAGE\",\r\n                        data: payload.midOP,\r\n                        backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                        borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        order: 6,\r\n                      },\r\n                    ]\r\n                  },\r\n                  dataC: {\r\n                    labels: ['Real price vs Predicted price'],\r\n                    datasets: [\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Real Time vs Predicted Open \",\r\n                      data: payload.RvsPredicted,\r\n                      backgroundColor: 'rgb(0, 0, 0, 0.6)',\r\n                      borderColor: 'rgb(0, 0, 0)',\r\n                      pointBorderColor: 'rgb(0, 0, 0)',\r\n                      order: 1\r\n                      },            \r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted Open vs Real Time\",\r\n                      data: payload.PvsReal,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.9)',//red\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Real Close vs Predicted Close\",\r\n                      data: payload.ClsPredicted,\r\n                      backgroundColor:'rgba(0,0, 0, 0.7)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(0, 0, 0, 0.7)',\r\n                      order: 3\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted Close vs Real Close\",\r\n                      data: payload.RealClose,\r\n                      backgroundColor: 'rgba(10, 204, 0, 0.9)',\r\n                      borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(10, 204, 0, 0.9)',\r\n                      order: 4\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Real High vs Predicted High\",\r\n                      data: payload.RealHigh,\r\n                      backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.6)',\r\n                      pointBorderColor: 'rgba(0, 0, 0, 1)',\r\n                      order: 5\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted High vs Real High\",\r\n                      data: payload.HghPredicted,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.9)', //blue\r\n                      borderColor: 'rgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 0.9)',\r\n                      order: 6\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Real Low vs Predicted Low\",\r\n                      data: payload.RealLow,\r\n                      backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(0, 0, 0, 0.9)',\r\n                      order: 7\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted Low vs Real Low\",\r\n                      data: payload.LowPredicted,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.9)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      order: 8\r\n                      }\r\n]\r\n                   }\r\n                }\r\n                 default: return state;\r\n                }\r\n             }\r\n             export default brainReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport bitcoinReducer from \"./bitcoinReducer\";\r\nimport brainReducer from \"./brainReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  bitcoin: bitcoinReducer,\r\n  brain: brainReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}